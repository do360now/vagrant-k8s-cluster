---

- name: Update the repository cache
  apt:
    update_cache: yes

#0 - Install Packages 
#containerd prerequisites, first load two modules and configure them to load on boot
#https://kubernetes.io/docs/setup/production-environment/container-runtimes/
- name: Use 'argv' to send a command as a list - leave 'command' empty
  command:
    argv:
      - modprobe overlay
      - modprobe br_netfilter
      

- name: Check if lines already exist in file
  stat: /etc/modules-load.d/containerd.conf
  register: containerd_lines

- name: Add a line to a file if the file does not exist, without passing regexp
  lineinfile:
    path: /etc/modules-load.d/containerd.conf
    insertafter: EOF
    line: "{{ item }}"
    create: yes
    loop: 
      - "overlay"
      - "br_netfilter"
  when: containerd_lines.stdout != overlay and br_netfilter

#Setup required sysctl params, these persist across reboots.
- name: Check if lines already exist in file
  stat: /etc/sysctl.d/99-kubernetes-cri.conf
  register: sysctl_param

- name: Add a line to a file if the file does not exist, without passing regexp
  lineinfile:
    path: /etc/sysctl.d/99-kubernetes-cri.conf
    insertafter: EOF
    line: "{{ item }}"
    create: yes
    loop: 
      - "net.bridge.bridge-nf-call-iptables  = 1"
      - "net.ipv4.ip_forward                 = 1"
      - "net.bridge.bridge-nf-call-ip6tables = 1"
  when: sysctl_param.stdout != "net.bridge.bridge-nf-call-iptables"

# #Apply sysctl params without reboot
# - name: Apply sysctl params without reboot
#   command: "sysctl --system"

# Apply sysctl params without reboot
- sysctl:
    reload: no

- name: Update the repository cache
  apt:
    update_cache: yes

- name: Install prerequisite packages (state=present is optional)
  apt:
    name: 
      - containerd
    state: present

#Create a containerd configuration file
- name: Create a directory if it does not exist
  file:
    path: /etc/containerd
    state: directory
    mode: '0755'

- name: Containerd config default
  command: "containerd config default"
  register: "containerd_config"

- name: Add a line to a file if the file does not exist, without passing regexp
  lineinfile:
    path: /etc/containerd/config.toml
    line: "{{ containerd_config }}"
    create: yes

#Set the cgroup driver for containerd to systemd which is required for the kubelet.
#For more information on this config file see:
# https://github.com/containerd/cri/blob/master/docs/config.md and also
# https://github.com/containerd/containerd/blob/master/docs/ops.md

- name: Copy containerd config file with owner and permissions
  copy:
    src: config.toml
    dest: /etc/containerd/config.toml
    owner: root
    group: root
    mode: '0644'
  notify:
    - Restart containerd


# - name: Add an Apt signing key, uses whichever key is at the URL
#   apt_key:
#     url: https://download.docker.com/linux/ubuntu/gpg
#     state: present

# - name: Add Docker's official GPG key 
#   shell: "curl -y -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg"

# - name: Setup repository
#   shell: echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

###################################
# Install Docker
###################################

# - name: Checking the installation of the docker package
#   shell: "dpkg -l | grep docker.*"
#   register: package_docker

# - name: Update the repository cache
#   apt:
#     update_cache: yes
#   when: package_docker.rc == 1   

# - name: Install Docker  (state=present is optional)
#   apt:
#     name: 
#       - docker-ce
#       - docker-ce-cli
#       - containerd.io
#     state: present
#   when: package_docker.rc == 1

# - name: Add the user 'vagrant' to the group 'docker'
#   user:
#     name: vagrant
#     comment: Vagrant
#     groups: docker,sudo
#     append: yes
# - name: check if docker is installed
  
# - name: Install docker
#   pip:
#     name: docker

# - name: Checking the installation of the docker package
#   shell: "dpkg -l | grep docker.*"
#   register: package_docker
#   failed_when: package_docker.rc == 1

# - name: Create a redis network
#   docker_network:
#     name: redis_network       


